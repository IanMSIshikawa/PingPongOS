#include "ppos.h"
#include "ppos-core-globals.h"
#include "ppos-disk-manager.h"

// ****************************************************************************
// Modifications and added functions

int sem_destroy (semaphore_t *s) {
    if (!s || s->active == 0) {
        return -1; // null or already inactive
    }
    
    s->active = 0; // inactive

    while (s->queue) { // Checks if queue is Null
        task_t *wakeup = (task_t *)s->queue;
     
        queue_remove((queue_t **)&(s->queue), (queue_t *)wakeup); // removing tasks

        queue_append((queue_t **)&readyQueue, (queue_t *)wakeup); // insert into readyQueue
    }

    return 0;
}

int sem_create(semaphore_t *s, int value){
    s->active = 1;
    s->count = value;
    s->queue =  NULL;

    return 0;
}

int sem_down (semaphore_t *s) {
    if (!s || s->active == 0){
        return -1;
    }

    PPOS_PREEMPT_DISABLE
    s->count -= 1;
    if (s->count < 0) {
        // Suspend running task
        task_suspend(taskExec, &s->queue);//suspend executing task and insert in semaphore queue

        // Execute new task
        PPOS_PREEMPT_ENABLE
        task_yield(); //free processor to other task
    }
    PPOS_PREEMPT_ENABLE

    return 0;
}

int sem_up (semaphore_t *s) {
    PPOS_PREEMPT_DISABLE
    if (!s || s->active == 0){
        return -1;
    } 

    s->count += 1;

    if (s->count <= 0){
        task_resume(s->queue); //remove from s->queue and insert in ready queue
    }

    PPOS_PREEMPT_ENABLE
    
    return 0;
}
}


